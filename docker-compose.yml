version: "3.8"

services:
  db:
    image: mysql:8.0
    container_name: tasks_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306" # opcional (para debug local)
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: tasks_api
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=${API_PORT:-3000}
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
    depends_on:
      - db
    networks:
      - app-network
    ports:
      - "${API_PORT:-3000}:${API_PORT:-3000}" # opcional: exponer para debug

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tasks_frontend
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - app-network
    # No exponer puerto: nginx servirá los archivos estáticos

  nginx:
    image: nginx:stable-alpine
    container_name: tasks_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - api
    networks:
      - app-network

volumes:
  mysql_data:

networks:
  app-network:
    driver: bridge
